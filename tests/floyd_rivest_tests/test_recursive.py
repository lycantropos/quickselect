from __future__ import annotations

from quickselect.floyd_rivest import nth_largest

def test_properties() -> None:
    elements = [878, 715, 468, 742, 938, 250, 174, 269, 750, 194, 952, 790, 245, 393, 650, 904, 66, 506, 976, 714, 626, 427, 858, 868, 871, 823, 114, 896, 321, 829, 826, 911, 683, 440, 271, 565, 444, 236, 226, 261, 912, 591, 304, 889, 648, 438, 567, 456, 395, 991, 747, 382, 40, 958, 207, 943, 323, 985, 599, 295, 82, 239, 460, 18, 996, 108, 270, 975, 253, 706, 672, 534, 215, 199, 727, 349, 927, 473, 492, 716, 598, 326, 552, 390, 172, 88, 852, 639, 907, 336, 814, 511, 522, 30, 538, 181, 817, 317, 786, 302, 704, 701, 663, 67, 182, 551, 221, 768, 718, 392, 139, 587, 178, 75, 356, 479, 635, 687, 509, 244, 708, 130, 303, 341, 366, 486, 967, 664, 787, 420, 910, 824, 595, 316, 462, 161, 187, 197, 388, 35, 418, 211, 959, 795, 709, 454, 346, 274, 622, 936, 367, 99, 876, 676, 149, 524, 442, 399, 352, 893, 21, 805, 670, 525, 424, 480, 569, 257, 307, 128, 421, 700, 849, 636, 347, 758, 328, 242, 732, 96, 192, 609, 107, 463, 697, 112, 405, 575, 633, 531, 761, 146, 944, 378, 741, 0, 464, 620, 277, 331, 711, 487, 484, 749, 319, 772, 179, 862, 169, 276, 10, 799, 611, 482, 497, 419, 368, 41, 412, 162, 364, 518, 376, 744, 841, 284, 897, 84, 584, 433, 48, 674, 232, 898, 843, 857, 375, 539, 686, 588, 735, 248, 549, 38, 769, 895, 870, 20, 934, 662, 865, 600, 541, 216, 423, 53, 954, 679, 36, 994, 27, 592, 397, 502, 498, 630, 148, 902, 846, 474, 15, 118, 695, 655, 176, 13, 607, 262, 103, 554, 640, 947, 428, 881, 827, 883, 698, 825, 218, 726, 532, 818, 105, 594, 913, 449, 654, 762, 83, 155, 788, 724, 845, 951, 923, 268, 24, 152, 997, 980, 931, 796, 31, 854, 666, 981, 458, 859, 238, 546, 281, 939, 529, 441, 684, 173, 842, 537, 590, 736, 905, 582, 26, 32, 990, 372, 615, 255, 23, 386, 310, 879, 147, 189, 357, 869, 968, 144, 873, 602, 668, 90, 1, 315, 651, 137, 689, 198, 327, 564, 348, 400, 164, 290, 887, 278, 297, 739, 696, 982, 159, 851, 946, 312, 512, 195, 631, 608, 596, 410, 819, 340, 260, 688, 175, 47, 111, 521, 979, 55, 984, 962, 759, 383, 220, 542, 604, 885, 200, 505, 437, 719, 597, 214, 385, 692, 603, 557, 37, 425, 475, 835, 645, 571, 966, 658, 643, 203, 978, 426, 135, 430, 78, 809, 838, 461, 632, 812, 265, 469, 528, 453, 988, 243, 166, 160, 765, 33, 971, 363, 165, 802, 562, 601, 918, 516, 389, 801, 237, 606, 264, 92, 821, 649, 925, 961, 585, 730, 329, 804, 289, 153, 526, 503, 973, 122, 279, 847, 950, 793, 833, 140, 439, 523, 373, 867, 675, 694, 154, 435, 536, 247, 618, 942, 429, 325, 920, 699, 647, 416, 402, 544, 240, 43, 318, 411, 483, 74, 624, 681, 917, 752, 345, 837, 915, 61, 974, 455, 401, 406, 29, 380, 452, 234, 914, 753, 882, 712, 949, 89, 816, 642, 4, 661, 353, 180, 73, 359, 337, 206, 880, 563, 535, 729, 616, 44, 85, 177, 338, 450, 299, 263, 116, 273, 391, 777, 2, 520, 948, 93, 986, 488, 656, 919, 614, 266, 57, 930, 940, 900, 855, 490, 481, 928, 300, 396, 493, 610, 832, 623, 125, 288, 308, 495, 745, 705, 404, 225, 63, 320, 673, 782, 133, 703, 191, 136, 365, 548, 56, 566, 738, 628, 209, 500, 638, 989, 126, 201, 217, 570, 343, 924, 413, 104, 102, 619, 158, 491, 589, 259, 141, 665, 447, 652, 305, 937, 763, 101, 894, 561, 576, 929, 637, 471, 955, 123, 680, 358, 861, 109, 81, 860, 374, 746, 272, 540, 785, 707, 723, 322, 728, 351, 332, 953, 884, 903, 956, 39, 780, 193, 407, 465, 583, 691, 258, 296, 530, 501, 306, 222, 163, 350, 150, 210, 720, 800, 908, 138, 998, 840, 17, 9, 921, 167, 756, 504, 70, 877, 702, 80, 743, 286, 853, 457, 398, 613, 230, 79, 157, 693, 186, 3, 285, 507, 972, 344, 850, 384, 682, 834, 324, 354, 228, 168, 171, 556, 342, 926, 403, 776, 581, 621, 313, 713, 555, 280, 115, 12, 519, 476, 334, 634, 339, 432, 577, 533, 983, 283, 241, 431, 806, 875, 558, 408, 16, 586, 657, 64, 361, 798, 184, 807, 574, 754, 899, 627, 94, 489, 311, 822, 58, 246, 721, 935, 117, 578, 68, 685, 185, 839, 941, 580, 97, 791, 387, 811, 466, 106, 764, 219, 478, 49, 545, 434, 91, 414, 370, 831, 291, 459, 733, 513, 965, 377, 287, 496, 755, 789, 445, 572, 886, 183, 717, 778, 54, 748, 309, 6, 734, 957, 213, 740, 417, 292, 844, 678, 737, 888, 110, 34, 369, 113, 204, 543, 251, 170, 932, 815, 275, 252, 394, 379, 233, 775, 333, 22, 142, 836, 646, 813, 559, 151, 467, 779, 208, 422, 5, 494, 964, 71, 485, 770, 443, 14, 301, 249, 254, 617, 231, 669, 188, 235, 72, 828, 202, 156, 641, 267, 227, 999, 87, 916, 121, 864, 508, 223, 987, 446, 550, 129, 371, 766, 797, 514, 120, 677, 409, 874, 922, 808, 11, 977, 127, 933, 477, 625, 45, 774, 863, 751, 7, 992, 773, 527, 448, 98, 293, 145, 731, 134, 547, 848, 76, 381, 335, 25, 59, 760, 725, 644, 212, 86, 362, 472, 510, 605, 60, 568, 224, 993, 783, 820, 8, 143, 781, 560, 892, 890, 963, 792, 28, 77, 229, 196, 355, 190, 629, 470, 69, 830, 906, 119, 612, 803, 451, 131, 579, 667, 294, 51, 660, 499, 995, 62, 573, 100, 767, 124, 945, 46, 722, 671, 891, 330, 65, 690, 909, 314, 132, 960, 256, 784, 659, 436, 298, 653, 515, 282, 553, 866, 872, 593, 95, 856, 757, 360, 415, 710, 970, 42, 50, 19, 794, 901, 205, 969, 517, 771, 52, 810]
    N = 10

    pre_elements_set = set(elements)
    result = nth_largest(elements, N - 1)
    post_elements_set = set(elements)

    # Checks that no elements were duplicated.
    assert pre_elements_set == post_elements_set
    # Checks that the 10th largest is correct.
    assert result == len(elements) - N